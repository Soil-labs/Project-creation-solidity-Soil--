{
  "language": "Solidity",
  "sources": {
    "contracts/Project.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.4;\r\n\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\"; \r\n\r\ncontract Project is Ownable {\r\n    uint256 public numberOfMembers;\r\n    string public name;\r\n    string public desc;\r\n    address[] public membersAddresses;\r\n    struct Member {\r\n        address member;\r\n        string[] role;\r\n        bool access;\r\n    }\r\n    mapping(address => Member) public Members;\r\n    event NewMemberAdded(address newMember, string[] role);\r\n    event MemberRevoked(address member);\r\n    constructor(address _owner,string memory _name, string memory _desc, string[] memory _adminsrole) {\r\n        transferOwnership(_owner);\r\n        numberOfMembers = 0;\r\n        Members[_owner] = Member(_owner, _adminsrole, true);\r\n        numberOfMembers += 1;\r\n        membersAddresses.push(_owner);\r\n        emit NewMemberAdded(_owner, _adminsrole);\r\n        name = _name;\r\n        desc = _desc;\r\n        \r\n    }\r\n    function addMember(address _dev, string[] memory _role) public onlyOwner {\r\n        require(Members[_dev].member == address(0), \"Member Alerady Exists\");\r\n        Members[_dev] = Member(_dev, _role, true);\r\n        numberOfMembers += 1;\r\n        membersAddresses.push(_dev);\r\n        emit NewMemberAdded(_dev, _role);\r\n    }\r\n\r\n    function revokeMember(address _dev) public onlyOwner {\r\n        require(_dev != owner(), \"Champ cant be revoked\");\r\n        Members[_dev].access = false;\r\n        emit MemberRevoked(_dev);\r\n    }\r\n\r\n    function changeRole(address _dev, string[] memory _newrole) public onlyOwner {\r\n        Members[_dev].role = _newrole;\r\n    }\r\n\r\n    function getRoles(address _dev) public view returns(string[] memory roles) {\r\n        return Members[_dev].role;\r\n    }\r\n    function updateProjectName(string memory _name) public onlyOwner {\r\n        name = _name;\r\n    }\r\n    function updateProjectDescription(string memory _desc) public onlyOwner {\r\n        desc = _desc;\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/ProjectFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\"; \nimport \"./Project.sol\";\n\ncontract ProjectFactory is Ownable {\n    struct ProjectDesc {\n        address project;\n        address champ;\n        string projecetName;\n    }\n    mapping(address => ProjectDesc[]) public projects;\n    mapping(address => uint256) public numberOfProjects;\n\n    function createProject(address _champ, string calldata _projectName, string calldata _desc, string[] calldata _adminroles)public {\n        Project newProject = new Project(_champ, _projectName, _desc, _adminroles);\n        projects[_champ].push(ProjectDesc(address(newProject), _champ, _projectName));\n        numberOfProjects[_champ] += 1;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}